#include <reg51.h>

#define LCD_data P0
#define keypad   P1
#define on 0
#define off 1

// LCD control bits
sbit RS = P2^0;
sbit RW = P2^1;
sbit EN = P2^2;

// Alarm input & Buzzer
sbit ALARM_BUZZER = P2^3;
sbit BUZZER = P2^4;

// I2C pins for EEPROM
sbit SDA = P2^6;
sbit SCL = P2^7;

// Variables
unsigned char phone_number[15]; // +977 + 10 digits + '\0' = 14 chars + 1 for safety
unsigned char digit_count = 0;
bit sms_sent_flag = 0;

// Function Declarations
void delay(unsigned int);
void LCD_cmd(unsigned char);
void LCD_data_write(unsigned char);
void LCD_init(void);
void LCD_string_write(unsigned char*);
char get_keypad_key(void);
void sim_init(void);
void tx(unsigned char);
void tx_str(unsigned char*);
void sms(unsigned char*, unsigned char*);
void gsm_delay(void);

void I2C_start(void);
void I2C_stop(void);
void I2C_write(unsigned char);
unsigned char I2C_read(bit);
void EEPROM_write(unsigned char, unsigned char);
unsigned char EEPROM_read(unsigned char);

// ================= Main =================
void main(void) {
    unsigned char i;
    char key;
    static bit firstLoop = 1;

    BUZZER = off;
    ALARM_BUZZER = 1;

    LCD_init();
  //  sim_init();

    // Store +977 into EEPROM if not present
    if (EEPROM_read(0) != '+') {
        EEPROM_write(0, '+');
        EEPROM_write(1, '9');
        EEPROM_write(2, '7');
        EEPROM_write(3, '7');
        EEPROM_write(4, '\0');  // Null terminate after country code for safety
    }

    // Read full number (country code + digits)
    for (i = 0; i <= 14; i++) {
        phone_number[i] = EEPROM_read(i);
        if (phone_number[i] == '\0') break;
    }
    phone_number[i] = '\0';

    // Calculate digit count after country code
    digit_count = 0;
    for (i = 4; i < 14 && phone_number[i] >= '0' && phone_number[i] <= '9'; i++) {
        digit_count++;
    }

    LCD_cmd(0x01);
    LCD_string_write("# to Change Num");
    LCD_cmd(0xC0);
    LCD_string_write("Else press Btn");

    while (1) {
        if (firstLoop && ALARM_BUZZER == 1) {
            delay(10);
            if (ALARM_BUZZER == 1) {
                if (digit_count == 10) {
                    BUZZER = on;
                    LCD_cmd(0x01);
                    LCD_string_write("Sending SMS...");
                    LCD_cmd(0xC0);
                    LCD_string_write(phone_number);
                    delay(350);
                    BUZZER = off;
		                sim_init();
                    sms(phone_number, "Emergency HELP");

                    LCD_cmd(0x01);
                    LCD_string_write("SMS Sent!");
                    delay(100);
                    LCD_cmd(0x01);
                    LCD_string_write("# to Change Num");
                    LCD_cmd(0xC0);
                    LCD_string_write("Else press Btn");
                } else {
                    BUZZER = on;
                    delay(350);
                    BUZZER = off;

                    LCD_cmd(0x01);
                    LCD_string_write("Can't Send SMS");
                    LCD_cmd(0xC0);
                    LCD_string_write("Press # to Enter");
                }
                firstLoop = 0;
            }
        }

        // Alarm check after first loop
        if (!firstLoop && ALARM_BUZZER == 1) {
            delay(100);
            if (ALARM_BUZZER == 1) {
                if (digit_count == 10) {
                    BUZZER = on;
                    LCD_cmd(0x01);
                    LCD_string_write("Sending SMS...");
                    LCD_cmd(0xC0);
                    LCD_string_write(phone_number);
                    delay(300);
                    BUZZER = off;
		                sim_init();
                    sms(phone_number, "Emergency HELP");

                    LCD_cmd(0x01);
                    LCD_string_write("SMS Sent!");
                    delay(100);
                    LCD_cmd(0x01);
                    LCD_string_write("# to Change Num");
                    LCD_cmd(0xC0);
                    LCD_string_write("Else press Btn");
                } else {
                    BUZZER = on;
                    LCD_cmd(0x01);
                    LCD_string_write("Can't Send SMS");
                    LCD_cmd(0xC0);
                    LCD_string_write("Press # to Enter");
                    delay(100);
                    BUZZER = off;
                }
            }
        }

        // Enter new number
        key = get_keypad_key();
        if (key == '#') {
            digit_count = 0;
            LCD_cmd(0x01);
            LCD_string_write("Enter New Num:");
            LCD_cmd(0xC0);

            while (digit_count < 10) {
                char k = get_keypad_key();
                if (k >= '0' && k <= '9') {
                    phone_number[4 + digit_count] = k;
                    EEPROM_write(4 + digit_count, k);
                    LCD_data_write(k);
                    digit_count++;
                    delay(30);
                }
            }

            phone_number[4 + digit_count] = '\0';
            EEPROM_write(4 + digit_count, '\0');  // Save null terminator in EEPROM

            LCD_cmd(0x01);
            LCD_string_write("Number Updated!");
            delay(100);

            // Reload full number
            for (i = 0; i < 14; i++) {
                phone_number[i] = EEPROM_read(i);
            }
            phone_number[14] = '\0';

            // Recalculate digit count after reload
            digit_count = 0;
            for (i = 4; i < 14 && phone_number[i] >= '0' && phone_number[i] <= '9'; i++) {
                digit_count++;
            }

            LCD_cmd(0x01);
            LCD_string_write("# to Change Num");
            LCD_cmd(0xC0);
            LCD_string_write("Else press Btn");
        }
    }
}

// ============== Keypad ==============
char get_keypad_key(void) {
    char key_val = 0;
    static char last_key = 0;

    keypad = 0xFF; delay(1);
    keypad = 0xFE;
    if ((keypad & 0x10) == 0) key_val = '1';
    else if ((keypad & 0x20) == 0) key_val = '2';
    else if ((keypad & 0x40) == 0) key_val = '3';

    keypad = 0xFD;
    if ((keypad & 0x10) == 0) key_val = '4';
    else if ((keypad & 0x20) == 0) key_val = '5';
    else if ((keypad & 0x40) == 0) key_val = '6';

    keypad = 0xFB;
    if ((keypad & 0x10) == 0) key_val = '7';
    else if ((keypad & 0x20) == 0) key_val = '8';
    else if ((keypad & 0x40) == 0) key_val = '9';

    keypad = 0xF7;
    if ((keypad & 0x10) == 0) key_val = '*';
    else if ((keypad & 0x20) == 0) key_val = '0';
    else if ((keypad & 0x40) == 0) key_val = '#';

    if (key_val != 0 && key_val != last_key) {
        last_key = key_val;
        return key_val;
    } else if (key_val == 0) {
        last_key = 0;
    }
    return 0;
}

// ============== LCD ==============
void delay(unsigned int time) {
    unsigned int i, j;
    for(i=0; i<time; i++)
        for(j=0; j<1275; j++);
}
void LCD_cmd(unsigned char command) {
    LCD_data = command;
    RS = 0; RW = 0; EN = 1;
    delay(2);
    EN = 0;
}
void LCD_data_write(unsigned char dataa) {
    LCD_data = dataa;
    RS = 1; RW = 0; EN = 1;
    delay(2);
    EN = 0;
}
void LCD_init(void) {
    LCD_cmd(0x38); delay(10);
    LCD_cmd(0x0E); delay(10);
    LCD_cmd(0x01); delay(10);
}
void LCD_string_write(unsigned char *str) {
    while (*str)
        LCD_data_write(*str++);
}

// ============== GSM ==============
void sim_init()
{
    SCON=0X50;    //0101 0000 
    TMOD=0X20;      //FOR AUTO RELOAD MODE OF TIMER 1   0010 0000
    TH1=0XFD; //FOR 9600 BAUD RATE OF THE MICROCONTROLLER
    TL1=0XFD; //load the value of high time
    TR1=1;  //START TIMER
}

void tx(unsigned char send)
{
    SBUF = send;
    while(TI==0);
    TI=0;   //reset the timer interrupt

}

void tx_string(unsigned char *s)
{
    while(*s)
        tx(*s++);
}

void sms(unsigned char *num1, unsigned char *msg)
{
    tx_string("AT");
    tx(0x0d); 
		//tx(0x0a);  // Try both CR and LF
    delay(200);

    tx_string("AT+CMGF=1");
    tx(0x0d); //tx(0x0a);
    delay(200);
	
    tx_string("AT+CMGS=");
		tx('"');
    tx_string(num1);
    tx('"');
    tx(0x0d); 
    delay(500); // Increase if needed

    // Ideally, wait here for '>' prompt from SIM800L

  tx_string(msg);
    tx(0x1A); // CTRL+Z to send
    delay(3000); // Wait for SMS send to complete
}


// ============== EEPROM I2C ==============
void I2C_start() {
    SDA = 1; SCL = 1; delay(1);
    SDA = 0; delay(1); SCL = 0;
}
void I2C_stop() {
    SDA = 0; SCL = 1; delay(1); SDA = 1;
}
void I2C_write(unsigned char dat) {
    char i;
    for (i = 0; i < 8; i++) {
        SDA = (dat & 0x80) ? 1 : 0;
        SCL = 1; delay(1); SCL = 0;
        dat <<= 1;
    }
    SDA = 1;
    SCL = 1; delay(1); SCL = 0;
}
unsigned char I2C_read(bit ack) {
    unsigned char i, dat = 0;
    SDA = 1;
    for (i = 0; i < 8; i++) {
        SCL = 1;
        dat <<= 1;
        if (SDA) dat |= 1;
        SCL = 0;
    }
    SDA = ack ? 0 : 1;
    SCL = 1; delay(1); SCL = 0;
    SDA = 1;
    return dat;
}
void EEPROM_write(unsigned char addr, unsigned char dat) {
    I2C_start();
    I2C_write(0xA0);
    I2C_write(addr);
    I2C_write(dat);
    I2C_stop();
    delay(5);
}
unsigned char EEPROM_read(unsigned char addr) {
    unsigned char dat;
    I2C_start();
    I2C_write(0xA0);
    I2C_write(addr);
    I2C_start();
    I2C_write(0xA1);
    dat = I2C_read(0);
    I2C_stop();
    return dat;
}
